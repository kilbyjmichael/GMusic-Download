#!/usr/bin/env ruby
require 'skyjam'

$usage="
Usage:
    usage gmusic_download [artist=...] [album=...] [song=...] [-n] [-h]

Options: -n, --noact Only print the results, do not download anything

    -h, --help
        Print help and exit
"

def help(code=1)
    puts $usage
    exit code
end

no_act=false

tests=[]
ARGV.each do |arg|
    if arg.match(/--help/) or arg.match(/^-h$/)
        help 0
    elsif arg.match(/^artist=/)
        q=arg.split('=')[1]
        tests << (lambda {|t| t.artist.match(/#{q}/i) })
    elsif arg.match(/^song=/)
        q=arg.split('=')[1]
        tests << (lambda {|t| t.title.match(/#{q}/i) })
    elsif arg.match(/^album=/)
        q=arg.split('=')[1]
        tests << (lambda {|t| t.album.match(/#{q}/i) })
    elsif arg == "-n" or arg == "--noact"
        no_act=true
    end
end

path = File.join(ENV['HOME'], 'Music')

if tests.count == 0
    help
end

begin 
    lib = SkyJam::Library.connect(path)
rescue SkyJam::Client::Error
    SkyJam::Library.auth
    lib = SkyJam::Library.connect(path)
end

if lib.tracks.count == 0
    puts "No tracks available. Maybe we haven't authorized?"
    SkyJam::Library.auth
end

songs = lib.tracks.select { |t| tests.all?{|f| f.call(t)}}

if songs.count == 0
    puts "Could not find any songs matching query"
    exit 1
end

if no_act
    songs.each do |song|
        puts "Found #{song.title} by #{song.artist}"
    end
end

albums={}
songs.map(&:album).uniq.each{|a| albums[a] = [] }
songs.each{|s| albums[s.album] << s }

threads = albums.map do |album,tracks|
    artist = tracks[0].artist.gsub('/', ' ').strip
    artist_dir = File.join(path, artist)

    if not Dir.exist? artist_dir
        Dir.mkdir artist_dir
    end

    album = album.gsub('/', ' ').strip
    album_dir = File.join(artist_dir, album)

    if not Dir.exist? album_dir
        Dir.mkdir album_dir
    end

    Thread.new do
        tracks.each do |song|
            puts "Downloading #{song.title} by #{song.artist}"
            it = File.new(File.join(album_dir, "#{song.number.to_s.rjust(2, "0")} - #{song.title.gsub('/', '-')}.mp3"), 'w+')
            it << song.data(remote:true)
        end
    end
end

threads.each do |t|
    t.join
end
